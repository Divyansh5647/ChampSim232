#include "cache.h"
#include <set>
#include <queue>
using namespace std; 

void CACHE::l2c_prefetcher_initialize() { cout << "CPU " << cpu << " L2C next line prefetcher" << endl; }

class BO_Class{
public:
    int n_offsets;
    int n;
    int *offsets;
    int score[46];
    int current_offset;
    int rounds;
    queue<pair<uint64_t, uint64_t> > delay_queue;
    //set<uint64_t> rr_table;
    set<uint64_t> prefetched_addresses;
    uint64_t rrTable[64];
    

    BO_Class(){
        offsets = new int[]{1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,8,-8,9,-9,10,-10,12,-12,15,-15,16,-16,18,-18,20,-20,24,-24,25,-25,27,-27,30,-30,32,-32,36,-36,40,-40,45,-45,50,-50}; 
        n = 0;
	current_offset = 1;
        rounds = 0;
        n_offsets = 46;
        for(int i = 0; i<n_offsets; i++) score[i] = 0;
	for(int i = 0; i<64; i++) rrTable[i] = 0;
    }

    int hash(uint64_t addr){
	return ((addr^(addr>>LOG2_BLOCK_SIZE))>>LOG2_BLOCK_SIZE)&63;
    }
    
    // Returns max-offset after updating scores
    int increment_scores(uint64_t addr){
        rounds++;
        //for(int i = 0; i<n_offsets; i++){
	for(int i = 0; i<64; i++){
    	    if(rrTable[i]==(((addr>>LOG2_BLOCK_SIZE)-offsets[n])<<LOG2_BLOCK_SIZE)){
        	score[n]++;
            	if(score[n]>=31) score[n]=31;
		break;
            }
	}
        
        //}
        if(score[n] == 31 || rounds==1000) finish_round();
	n++;
	if(n==46){
		n=0;
	}	
        return current_offset;
    }
    
    void finish_round(){
        int mx_score(-1);
        int best_offset(1);
	for(int i =0; i<n_offsets; i++){
	    //cout << score[i] << ", ";
	    if(score[i]>mx_score){
		mx_score=score[i];
		best_offset=offsets[i];
	    }
	}
	//cout << endl;
	current_offset=best_offset;
	if(mx_score<2) current_offset=0;
        rounds = 0;
        for(int i = 0; i<n_offsets; i++) score[i] = 0;
    }

    void handle_queue(uint64_t addr){
        if(delay_queue.size()==15){
            rrTable[hash(delay_queue.front().first)]=(delay_queue.front().first);
            delay_queue.pop();
        }
	pair<uint64_t, uint64_t> tmp;
	tmp.first = addr;
	tmp.second = current_core_cycle[0];
        delay_queue.push(tmp);
	
	while(delay_queue.size()>0){
	    if(current_core_cycle[0]-delay_queue.front().second < 60){
	    	break;
	    }
            rrTable[hash(delay_queue.front().first)]=(delay_queue.front().first);
	    delay_queue.pop();
	}
    }

    bool prefetched(uint64_t addr){
    	if(prefetched_addresses.count(addr)!=0){
	    return 1;
        }
	return 0;
    }

};

BO_Class bo;

uint32_t CACHE::l2c_prefetcher_operate(
    uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in) {
    if (type != LOAD)
        return metadata_in;
    //cout << type << "a" << cache_hit << endl;
    if (cache_hit==1 && !bo.prefetched(addr)){
    	return metadata_in;
    }
    bo.handle_queue(addr);

    uint64_t pf_addr = ((addr >> LOG2_BLOCK_SIZE) + bo.increment_scores(addr)) << LOG2_BLOCK_SIZE;
    //uint64_t pf_addr = ((addr >> LOG2_BLOCK_SIZE) + 1) << LOG2_BLOCK_SIZE;

    DP(if (warmup_complete[cpu]) {
        cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr >> LOG2_BLOCK_SIZE);
        cout << " pf_cl: " << (pf_addr >> LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit
             << " type: " << +type << endl;
    });

// rr_table 
    if(bo.current_offset==0) return metadata_in;
    prefetch_line(ip, addr, pf_addr, FILL_L2, 0);

    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(
    uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in) {
    
    bo.rrTable[bo.hash(((addr>>LOG2_BLOCK_SIZE)-bo.current_offset)<<LOG2_BLOCK_SIZE)]=((addr>>LOG2_BLOCK_SIZE)-bo.current_offset)<<LOG2_BLOCK_SIZE;
    //bo.rr_table.insert(((addr>>LOG2_BLOCK_SIZE)-bo.current_offset)<<LOG2_BLOCK_SIZE);
    bo.prefetched_addresses.insert(addr);
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats() { cout << "CPU " << cpu << " L2C next line prefetcher final stats" << endl; }
